// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Activity:     newActivity(db, opts...),
		ActivityUser: newActivityUser(db, opts...),
		Admin:        newAdmin(db, opts...),
		Follow:       newFollow(db, opts...),
		GPSRoute:     newGPSRoute(db, opts...),
		Like:         newLike(db, opts...),
		Log:          newLog(db, opts...),
		Moment:       newMoment(db, opts...),
		Organiser:    newOrganiser(db, opts...),
		Tag:          newTag(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Activity     activity
	ActivityUser activityUser
	Admin        admin
	Follow       follow
	GPSRoute     gPSRoute
	Like         like
	Log          log
	Moment       moment
	Organiser    organiser
	Tag          tag
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Activity:     q.Activity.clone(db),
		ActivityUser: q.ActivityUser.clone(db),
		Admin:        q.Admin.clone(db),
		Follow:       q.Follow.clone(db),
		GPSRoute:     q.GPSRoute.clone(db),
		Like:         q.Like.clone(db),
		Log:          q.Log.clone(db),
		Moment:       q.Moment.clone(db),
		Organiser:    q.Organiser.clone(db),
		Tag:          q.Tag.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Activity:     q.Activity.replaceDB(db),
		ActivityUser: q.ActivityUser.replaceDB(db),
		Admin:        q.Admin.replaceDB(db),
		Follow:       q.Follow.replaceDB(db),
		GPSRoute:     q.GPSRoute.replaceDB(db),
		Like:         q.Like.replaceDB(db),
		Log:          q.Log.replaceDB(db),
		Moment:       q.Moment.replaceDB(db),
		Organiser:    q.Organiser.replaceDB(db),
		Tag:          q.Tag.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Activity     *activityDo
	ActivityUser *activityUserDo
	Admin        *adminDo
	Follow       *followDo
	GPSRoute     *gPSRouteDo
	Like         *likeDo
	Log          *logDo
	Moment       *momentDo
	Organiser    *organiserDo
	Tag          *tagDo
	User         *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Activity:     q.Activity.WithContext(ctx),
		ActivityUser: q.ActivityUser.WithContext(ctx),
		Admin:        q.Admin.WithContext(ctx),
		Follow:       q.Follow.WithContext(ctx),
		GPSRoute:     q.GPSRoute.WithContext(ctx),
		Like:         q.Like.WithContext(ctx),
		Log:          q.Log.WithContext(ctx),
		Moment:       q.Moment.WithContext(ctx),
		Organiser:    q.Organiser.WithContext(ctx),
		Tag:          q.Tag.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
