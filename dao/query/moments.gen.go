// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"api.backend.xjco2913/dao/model"
)

func newMoment(db *gorm.DB, opts ...gen.DOOption) moment {
	_moment := moment{}

	_moment.momentDo.UseDB(db, opts...)
	_moment.momentDo.UseModel(&model.Moment{})

	tableName := _moment.momentDo.TableName()
	_moment.ALL = field.NewAsterisk(tableName)
	_moment.ID = field.NewInt32(tableName, "id")
	_moment.AuthorID = field.NewString(tableName, "authorId")
	_moment.Content = field.NewString(tableName, "content")
	_moment.ImageURL = field.NewString(tableName, "imageUrl")
	_moment.VideoURL = field.NewString(tableName, "videoUrl")
	_moment.RouteID = field.NewInt32(tableName, "routeId")
	_moment.CreatedAt = field.NewTime(tableName, "createdAt")
	_moment.UpdatedAt = field.NewTime(tableName, "updatedAt")

	_moment.fillFieldMap()

	return _moment
}

type moment struct {
	momentDo momentDo

	ALL       field.Asterisk
	ID        field.Int32
	AuthorID  field.String
	Content   field.String
	ImageURL  field.String
	VideoURL  field.String
	RouteID   field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m moment) Table(newTableName string) *moment {
	m.momentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m moment) As(alias string) *moment {
	m.momentDo.DO = *(m.momentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *moment) updateTableName(table string) *moment {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.AuthorID = field.NewString(table, "authorId")
	m.Content = field.NewString(table, "content")
	m.ImageURL = field.NewString(table, "imageUrl")
	m.VideoURL = field.NewString(table, "videoUrl")
	m.RouteID = field.NewInt32(table, "routeId")
	m.CreatedAt = field.NewTime(table, "createdAt")
	m.UpdatedAt = field.NewTime(table, "updatedAt")

	m.fillFieldMap()

	return m
}

func (m *moment) WithContext(ctx context.Context) *momentDo { return m.momentDo.WithContext(ctx) }

func (m moment) TableName() string { return m.momentDo.TableName() }

func (m moment) Alias() string { return m.momentDo.Alias() }

func (m moment) Columns(cols ...field.Expr) gen.Columns { return m.momentDo.Columns(cols...) }

func (m *moment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *moment) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["authorId"] = m.AuthorID
	m.fieldMap["content"] = m.Content
	m.fieldMap["imageUrl"] = m.ImageURL
	m.fieldMap["videoUrl"] = m.VideoURL
	m.fieldMap["routeId"] = m.RouteID
	m.fieldMap["createdAt"] = m.CreatedAt
	m.fieldMap["updatedAt"] = m.UpdatedAt
}

func (m moment) clone(db *gorm.DB) moment {
	m.momentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m moment) replaceDB(db *gorm.DB) moment {
	m.momentDo.ReplaceDB(db)
	return m
}

type momentDo struct{ gen.DO }

func (m momentDo) Debug() *momentDo {
	return m.withDO(m.DO.Debug())
}

func (m momentDo) WithContext(ctx context.Context) *momentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m momentDo) ReadDB() *momentDo {
	return m.Clauses(dbresolver.Read)
}

func (m momentDo) WriteDB() *momentDo {
	return m.Clauses(dbresolver.Write)
}

func (m momentDo) Session(config *gorm.Session) *momentDo {
	return m.withDO(m.DO.Session(config))
}

func (m momentDo) Clauses(conds ...clause.Expression) *momentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m momentDo) Returning(value interface{}, columns ...string) *momentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m momentDo) Not(conds ...gen.Condition) *momentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m momentDo) Or(conds ...gen.Condition) *momentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m momentDo) Select(conds ...field.Expr) *momentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m momentDo) Where(conds ...gen.Condition) *momentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m momentDo) Order(conds ...field.Expr) *momentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m momentDo) Distinct(cols ...field.Expr) *momentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m momentDo) Omit(cols ...field.Expr) *momentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m momentDo) Join(table schema.Tabler, on ...field.Expr) *momentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m momentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *momentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m momentDo) RightJoin(table schema.Tabler, on ...field.Expr) *momentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m momentDo) Group(cols ...field.Expr) *momentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m momentDo) Having(conds ...gen.Condition) *momentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m momentDo) Limit(limit int) *momentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m momentDo) Offset(offset int) *momentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m momentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *momentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m momentDo) Unscoped() *momentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m momentDo) Create(values ...*model.Moment) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m momentDo) CreateInBatches(values []*model.Moment, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m momentDo) Save(values ...*model.Moment) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m momentDo) First() (*model.Moment, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moment), nil
	}
}

func (m momentDo) Take() (*model.Moment, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moment), nil
	}
}

func (m momentDo) Last() (*model.Moment, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moment), nil
	}
}

func (m momentDo) Find() ([]*model.Moment, error) {
	result, err := m.DO.Find()
	return result.([]*model.Moment), err
}

func (m momentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Moment, err error) {
	buf := make([]*model.Moment, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m momentDo) FindInBatches(result *[]*model.Moment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m momentDo) Attrs(attrs ...field.AssignExpr) *momentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m momentDo) Assign(attrs ...field.AssignExpr) *momentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m momentDo) Joins(fields ...field.RelationField) *momentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m momentDo) Preload(fields ...field.RelationField) *momentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m momentDo) FirstOrInit() (*model.Moment, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moment), nil
	}
}

func (m momentDo) FirstOrCreate() (*model.Moment, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moment), nil
	}
}

func (m momentDo) FindByPage(offset int, limit int) (result []*model.Moment, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m momentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m momentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m momentDo) Delete(models ...*model.Moment) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *momentDo) withDO(do gen.Dao) *momentDo {
	m.DO = *do.(*gen.DO)
	return m
}
