// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"api.backend.xjco2913/dao/model"
)

func newOrganiser(db *gorm.DB, opts ...gen.DOOption) organiser {
	_organiser := organiser{}

	_organiser.organiserDo.UseDB(db, opts...)
	_organiser.organiserDo.UseModel(&model.Organiser{})

	tableName := _organiser.organiserDo.TableName()
	_organiser.ALL = field.NewAsterisk(tableName)
	_organiser.ID = field.NewInt32(tableName, "ID")
	_organiser.UserID = field.NewString(tableName, "userId")

	_organiser.fillFieldMap()

	return _organiser
}

type organiser struct {
	organiserDo organiserDo

	ALL    field.Asterisk
	ID     field.Int32
	UserID field.String

	fieldMap map[string]field.Expr
}

func (o organiser) Table(newTableName string) *organiser {
	o.organiserDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o organiser) As(alias string) *organiser {
	o.organiserDo.DO = *(o.organiserDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *organiser) updateTableName(table string) *organiser {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "ID")
	o.UserID = field.NewString(table, "userId")

	o.fillFieldMap()

	return o
}

func (o *organiser) WithContext(ctx context.Context) *organiserDo {
	return o.organiserDo.WithContext(ctx)
}

func (o organiser) TableName() string { return o.organiserDo.TableName() }

func (o organiser) Alias() string { return o.organiserDo.Alias() }

func (o organiser) Columns(cols ...field.Expr) gen.Columns { return o.organiserDo.Columns(cols...) }

func (o *organiser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *organiser) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 2)
	o.fieldMap["ID"] = o.ID
	o.fieldMap["userId"] = o.UserID
}

func (o organiser) clone(db *gorm.DB) organiser {
	o.organiserDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o organiser) replaceDB(db *gorm.DB) organiser {
	o.organiserDo.ReplaceDB(db)
	return o
}

type organiserDo struct{ gen.DO }

func (o organiserDo) Debug() *organiserDo {
	return o.withDO(o.DO.Debug())
}

func (o organiserDo) WithContext(ctx context.Context) *organiserDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o organiserDo) ReadDB() *organiserDo {
	return o.Clauses(dbresolver.Read)
}

func (o organiserDo) WriteDB() *organiserDo {
	return o.Clauses(dbresolver.Write)
}

func (o organiserDo) Session(config *gorm.Session) *organiserDo {
	return o.withDO(o.DO.Session(config))
}

func (o organiserDo) Clauses(conds ...clause.Expression) *organiserDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o organiserDo) Returning(value interface{}, columns ...string) *organiserDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o organiserDo) Not(conds ...gen.Condition) *organiserDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o organiserDo) Or(conds ...gen.Condition) *organiserDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o organiserDo) Select(conds ...field.Expr) *organiserDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o organiserDo) Where(conds ...gen.Condition) *organiserDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o organiserDo) Order(conds ...field.Expr) *organiserDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o organiserDo) Distinct(cols ...field.Expr) *organiserDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o organiserDo) Omit(cols ...field.Expr) *organiserDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o organiserDo) Join(table schema.Tabler, on ...field.Expr) *organiserDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o organiserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *organiserDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o organiserDo) RightJoin(table schema.Tabler, on ...field.Expr) *organiserDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o organiserDo) Group(cols ...field.Expr) *organiserDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o organiserDo) Having(conds ...gen.Condition) *organiserDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o organiserDo) Limit(limit int) *organiserDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o organiserDo) Offset(offset int) *organiserDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o organiserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *organiserDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o organiserDo) Unscoped() *organiserDo {
	return o.withDO(o.DO.Unscoped())
}

func (o organiserDo) Create(values ...*model.Organiser) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o organiserDo) CreateInBatches(values []*model.Organiser, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o organiserDo) Save(values ...*model.Organiser) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o organiserDo) First() (*model.Organiser, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Organiser), nil
	}
}

func (o organiserDo) Take() (*model.Organiser, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Organiser), nil
	}
}

func (o organiserDo) Last() (*model.Organiser, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Organiser), nil
	}
}

func (o organiserDo) Find() ([]*model.Organiser, error) {
	result, err := o.DO.Find()
	return result.([]*model.Organiser), err
}

func (o organiserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Organiser, err error) {
	buf := make([]*model.Organiser, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o organiserDo) FindInBatches(result *[]*model.Organiser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o organiserDo) Attrs(attrs ...field.AssignExpr) *organiserDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o organiserDo) Assign(attrs ...field.AssignExpr) *organiserDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o organiserDo) Joins(fields ...field.RelationField) *organiserDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o organiserDo) Preload(fields ...field.RelationField) *organiserDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o organiserDo) FirstOrInit() (*model.Organiser, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Organiser), nil
	}
}

func (o organiserDo) FirstOrCreate() (*model.Organiser, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Organiser), nil
	}
}

func (o organiserDo) FindByPage(offset int, limit int) (result []*model.Organiser, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o organiserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o organiserDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o organiserDo) Delete(models ...*model.Organiser) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *organiserDo) withDO(do gen.Dao) *organiserDo {
	o.DO = *do.(*gen.DO)
	return o
}
