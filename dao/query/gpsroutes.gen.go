// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"api.backend.xjco2913/dao/model"
)

func newGPSRoute(db *gorm.DB, opts ...gen.DOOption) gPSRoute {
	_gPSRoute := gPSRoute{}

	_gPSRoute.gPSRouteDo.UseDB(db, opts...)
	_gPSRoute.gPSRouteDo.UseModel(&model.GPSRoute{})

	tableName := _gPSRoute.gPSRouteDo.TableName()
	_gPSRoute.ALL = field.NewAsterisk(tableName)
	_gPSRoute.ID = field.NewInt32(tableName, "id")
	_gPSRoute.Path = field.NewString(tableName, "path")

	_gPSRoute.fillFieldMap()

	return _gPSRoute
}

type gPSRoute struct {
	gPSRouteDo gPSRouteDo

	ALL  field.Asterisk
	ID   field.Int32
	Path field.String

	fieldMap map[string]field.Expr
}

func (g gPSRoute) Table(newTableName string) *gPSRoute {
	g.gPSRouteDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gPSRoute) As(alias string) *gPSRoute {
	g.gPSRouteDo.DO = *(g.gPSRouteDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gPSRoute) updateTableName(table string) *gPSRoute {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Path = field.NewString(table, "path")

	g.fillFieldMap()

	return g
}

func (g *gPSRoute) WithContext(ctx context.Context) *gPSRouteDo { return g.gPSRouteDo.WithContext(ctx) }

func (g gPSRoute) TableName() string { return g.gPSRouteDo.TableName() }

func (g gPSRoute) Alias() string { return g.gPSRouteDo.Alias() }

func (g gPSRoute) Columns(cols ...field.Expr) gen.Columns { return g.gPSRouteDo.Columns(cols...) }

func (g *gPSRoute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gPSRoute) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 2)
	g.fieldMap["id"] = g.ID
	g.fieldMap["path"] = g.Path
}

func (g gPSRoute) clone(db *gorm.DB) gPSRoute {
	g.gPSRouteDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gPSRoute) replaceDB(db *gorm.DB) gPSRoute {
	g.gPSRouteDo.ReplaceDB(db)
	return g
}

type gPSRouteDo struct{ gen.DO }

func (g gPSRouteDo) Debug() *gPSRouteDo {
	return g.withDO(g.DO.Debug())
}

func (g gPSRouteDo) WithContext(ctx context.Context) *gPSRouteDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gPSRouteDo) ReadDB() *gPSRouteDo {
	return g.Clauses(dbresolver.Read)
}

func (g gPSRouteDo) WriteDB() *gPSRouteDo {
	return g.Clauses(dbresolver.Write)
}

func (g gPSRouteDo) Session(config *gorm.Session) *gPSRouteDo {
	return g.withDO(g.DO.Session(config))
}

func (g gPSRouteDo) Clauses(conds ...clause.Expression) *gPSRouteDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gPSRouteDo) Returning(value interface{}, columns ...string) *gPSRouteDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gPSRouteDo) Not(conds ...gen.Condition) *gPSRouteDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gPSRouteDo) Or(conds ...gen.Condition) *gPSRouteDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gPSRouteDo) Select(conds ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gPSRouteDo) Where(conds ...gen.Condition) *gPSRouteDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gPSRouteDo) Order(conds ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gPSRouteDo) Distinct(cols ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gPSRouteDo) Omit(cols ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gPSRouteDo) Join(table schema.Tabler, on ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gPSRouteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gPSRouteDo) RightJoin(table schema.Tabler, on ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gPSRouteDo) Group(cols ...field.Expr) *gPSRouteDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gPSRouteDo) Having(conds ...gen.Condition) *gPSRouteDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gPSRouteDo) Limit(limit int) *gPSRouteDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gPSRouteDo) Offset(offset int) *gPSRouteDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gPSRouteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gPSRouteDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gPSRouteDo) Unscoped() *gPSRouteDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gPSRouteDo) Create(values ...*model.GPSRoute) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gPSRouteDo) CreateInBatches(values []*model.GPSRoute, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gPSRouteDo) Save(values ...*model.GPSRoute) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gPSRouteDo) First() (*model.GPSRoute, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GPSRoute), nil
	}
}

func (g gPSRouteDo) Take() (*model.GPSRoute, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GPSRoute), nil
	}
}

func (g gPSRouteDo) Last() (*model.GPSRoute, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GPSRoute), nil
	}
}

func (g gPSRouteDo) Find() ([]*model.GPSRoute, error) {
	result, err := g.DO.Find()
	return result.([]*model.GPSRoute), err
}

func (g gPSRouteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GPSRoute, err error) {
	buf := make([]*model.GPSRoute, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gPSRouteDo) FindInBatches(result *[]*model.GPSRoute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gPSRouteDo) Attrs(attrs ...field.AssignExpr) *gPSRouteDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gPSRouteDo) Assign(attrs ...field.AssignExpr) *gPSRouteDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gPSRouteDo) Joins(fields ...field.RelationField) *gPSRouteDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gPSRouteDo) Preload(fields ...field.RelationField) *gPSRouteDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gPSRouteDo) FirstOrInit() (*model.GPSRoute, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GPSRoute), nil
	}
}

func (g gPSRouteDo) FirstOrCreate() (*model.GPSRoute, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GPSRoute), nil
	}
}

func (g gPSRouteDo) FindByPage(offset int, limit int) (result []*model.GPSRoute, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gPSRouteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gPSRouteDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gPSRouteDo) Delete(models ...*model.GPSRoute) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gPSRouteDo) withDO(do gen.Dao) *gPSRouteDo {
	g.DO = *do.(*gen.DO)
	return g
}
